generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  crseCode   String    @id @map("crse_code") @db.VarChar(5)
  crseName   String    @map("crse_name") @db.VarChar(100)
  offeredBy  String    @map("offered_by") @db.VarChar(5)
  crseFee    Decimal   @map("crse_fee") @db.Decimal(7, 2)
  labFee     Decimal?  @map("lab_fee") @db.Decimal(7, 2)

  students student[] @relation("student_crse_code_fk")
  department department @relation("departmentCourse", fields: [offeredBy], references: [deptCode], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_offered_by")
}

model staff_dependent {
  staff_no        String @db.Char(4)
  dependent_name  String @db.VarChar(30)
  relationship    String @db.VarChar(20)

  staff staff @relation(fields: [staff_no], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "staff_dependent_staff_no_fk")

  @@id([staff_no, dependent_name])
  @@map("staff_dependent")
}




model pre_requisite{
  mod_code  String  @db.VarChar(10)
  requisite String  @db.VarChar(10)
// Relation to module.modCode (mod_code → module)
  module       module @relation("preRequisiteModCodeToModule", fields: [mod_code], references: [modCode], onDelete: NoAction, onUpdate: NoAction, map: "pre_requisite_mod_code_fk")

  // Relation to module.modCode (requisite → module)
  prerequisite module @relation("preRequisiteRequisiteToModule", fields: [requisite], references: [modCode], onDelete: NoAction, onUpdate: NoAction, map: "pre_requisite_requisite_fk")

  @@id([mod_code,requisite])
}

model country{
  country_name String @id@db.VarChar(30)
  language String @db.VarChar(30)
  region String @db.VarChar (30)

  students student[] @relation("student_nationality_fk")

}

model student {
  adm_no         String   @id @db.Char(4)
  stud_name      String   @db.VarChar(30)
  gender         String   @db.Char(1)
  address        String   @db.VarChar(100)
  mobile_phone   String   @db.Char(8)
  home_phone     String   @db.Char(8)
  dob            DateTime
  nationality    String   @db.VarChar(30)
  crse_code      String   @db.VarChar(5)

  // Relations
  modPerformances stud_mod_performance[] // link to performance
  course   course  @relation("student_crse_code_fk", fields: [crse_code], references: [crseCode], onDelete: NoAction, onUpdate: NoAction, map: "student_crse_code_fk")
  country  country @relation("student_nationality_fk", fields: [nationality], references: [country_name], onDelete: NoAction, onUpdate: NoAction, map: "student_nationality_fk")
}

model stud_mod_performance {
  adm_no         String @db.Char(4)
  mod_registered String @db.VarChar(10)
  mark           Int
  grade          String @db.Char(2)

  //  Relationships
  student student @relation(fields: [adm_no], references: [adm_no], onDelete: NoAction, onUpdate: NoAction, map: "stud_mod_performance_adm_no_fk")
  module  module  @relation(fields: [mod_registered], references: [modCode], onDelete: NoAction, onUpdate: NoAction, map: "stud_mod_performance_mod_registered_fk")

  @@id([adm_no, mod_registered])
  @@map("stud_mod_performance")
}



model department {
  deptCode         String    @id @map("dept_code") @db.VarChar(5)
  deptName         String    @map("dept_name") @db.VarChar(100)
  hod              String    @db.Char(4) @unique
  noOfStaff        Int?      @map("no_of_staff")
  maxStaffStrength Int?      @map("max_staff_strength")
  budget           Decimal?  @db.Decimal(9, 2)
  expenditure      Decimal?  @db.Decimal(9, 2)
  hodApptDate      DateTime? @map("hod_appt_date") @db.Date

  courses course[] @relation("departmentCourse")
  departmentHodToStaff      staff   @relation("departmentHodToStaff", fields: [hod], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "dept_hod_fk")
  staffDeptCodeToDepartment staff[] @relation("staffDeptCodeToDepartment")
}

model staff {
  staffNo           String   @id @map("staff_no") @db.Char(4)
  staffName         String   @map("staff_name") @db.VarChar(100)
  supervisorStaffNo String?  @map("supervisor_staff_no") @db.Char(4)
  dob               DateTime @db.Date
  grade             String   @db.VarChar(5)
  maritalStatus     String   @map("marital_status") @db.VarChar(1)
  pay               Decimal? @db.Decimal(7, 2)
  allowance         Decimal? @db.Decimal(7, 2)
  hourlyRate        Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender            String   @db.Char(1)
  citizenship       String   @db.VarChar(10)
  joinYr            Int      @map("join_yr")
  deptCode          String   @map("dept_code") @db.VarChar(5)
  typeOfEmployment  String   @map("type_of_employment") @db.VarChar(2)
  highestQln        String   @map("highest_qln") @db.VarChar(10)
  designation       String   @db.VarChar(20)

  // One-to-many: one staff → many dependents
  staffDependent staff_dependent[]

  // One-to-one: staff is HOD of one department (optional)
  hodOfDepartment department[] @relation("departmentHodToStaff")

  // Many-to-one: staff belongs to one department
  department department @relation("staffDeptCodeToDepartment", fields: [deptCode], references: [deptCode], onDelete: NoAction, onUpdate: NoAction, map: "staff_dept_code_fk")

  module module[] @relation(map: "mod_mod_coord_fk")
}


model staffBackup {
  staffNo          String   @id @map("staff_no") @db.Char(4)
  staffName        String   @map("staff_name") @db.VarChar(100)
  supervisor       String?  @db.Char(4)
  dob              DateTime @db.Date
  grade            String   @db.VarChar(5)
  maritalStatus    String   @map("marital_status") @db.VarChar(1)
  pay              Decimal? @db.Decimal(7, 2)
  allowance        Decimal? @db.Decimal(7, 2)
  hourlyRate       Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender           String   @db.Char(1)
  citizenship      String   @db.VarChar(10)
  joinYr           Int      @map("join_yr")
  deptCode         String   @map("dept_code") @db.VarChar(5)
  typeOfEmployment String   @map("type_of_employment") @db.VarChar(2)
  highestQln       String   @map("highest_qln") @db.VarChar(10)
  designation      String   @db.VarChar(20)

  @@map("staff_backup")
}

model module {
  modCode    String    @id @map("mod_code") @db.VarChar(10)
  modName    String    @map("mod_name") @db.VarChar(100)
  creditUnit Int       @map("credit_unit")
  modCoord   String?   @map("mod_coord") @db.Char(4)

  // Relation to staff (module coordinator)
  coordinator staff? @relation(fields: [modCoord],references: [staffNo],map: "mod_mod_coord_fk")
  modPerformances stud_mod_performance[] // link to performance

  // Self-referencing many-to-many via pre_requisite table
  prerequisites     pre_requisite[] @relation("preRequisiteModCodeToModule")
  isPrerequisiteFor pre_requisite[] @relation("preRequisiteRequisiteToModule")
}


model userAccount {
  id        Int    @id
  accountNo String @map("account_no") @db.VarChar(6)
  role      Int
  password  String @db.VarChar(255)

  @@map("user_account")
}

model userRole {
  id   Int    @id
  name String @db.VarChar(25)

  @@map("user_role")
}

